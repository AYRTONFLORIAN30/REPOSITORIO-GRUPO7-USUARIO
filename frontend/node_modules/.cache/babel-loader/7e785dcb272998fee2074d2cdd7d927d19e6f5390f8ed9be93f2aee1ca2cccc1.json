{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst multer = require('multer');\nconst fs = require('fs');\nconst readline = require('readline');\nrequire('dotenv').config();\nconst app = express();\nconst PORT = 5000;\napp.use(cors());\napp.use(bodyParser.json());\n\n// Multer para subir archivos\nconst upload = multer({\n  dest: 'uploads/'\n});\n\n// Ruta para subir archivo CSV\napp.post('/upload-csv', upload.single('archivo'), async (req, res) => {\n  const filePath = req.file.path;\n  const results = [];\n  try {\n    const fileStream = fs.createReadStream(filePath);\n    const rl = readline.createInterface({\n      input: fileStream,\n      crlfDelay: Infinity\n    });\n    let current = {\n      Clase: '',\n      Profesor: '',\n      Día: '',\n      Hora: '',\n      Aula: ''\n    };\n    for await (const line of rl) {\n      if (line.includes('Clase:')) {\n        var _line$split$;\n        current.Clase = (_line$split$ = line.split(':')[1]) === null || _line$split$ === void 0 ? void 0 : _line$split$.trim();\n      } else if (line.includes('Profesor:')) {\n        var _line$split$2;\n        current.Profesor = (_line$split$2 = line.split(':')[1]) === null || _line$split$2 === void 0 ? void 0 : _line$split$2.trim();\n      } else if (line.includes('Día:')) {\n        var _line$split$3;\n        current.Día = (_line$split$3 = line.split(':')[1]) === null || _line$split$3 === void 0 ? void 0 : _line$split$3.trim();\n      } else if (line.includes('Hora:')) {\n        var _line$split$4;\n        current.Hora = (_line$split$4 = line.split(':')[1]) === null || _line$split$4 === void 0 ? void 0 : _line$split$4.trim();\n      } else if (line.includes('Aula:')) {\n        var _line$split$5;\n        current.Aula = (_line$split$5 = line.split(':')[1]) === null || _line$split$5 === void 0 ? void 0 : _line$split$5.trim();\n      }\n\n      // Si ya tenemos todos los campos, guardamos el horario\n      if (current.Clase && current.Profesor && current.Día && current.Hora && current.Aula) {\n        results.push({\n          ...current\n        });\n        current = {\n          Clase: '',\n          Profesor: '',\n          Día: '',\n          Hora: '',\n          Aula: ''\n        };\n      }\n    }\n    fs.unlinkSync(filePath); // borrar archivo temporal\n    res.json(results);\n  } catch (error) {\n    console.error('Error al procesar archivo:', error);\n    res.status(500).send('Error al procesar archivo');\n  }\n});\n\n// ========== AUTENTICACIÓN GOOGLE CALENDAR ==========\n\nconst {\n  google\n} = require('googleapis');\nconst oAuth2Client = new google.auth.OAuth2(process.env.client_id, process.env.client_secret, process.env.redirect_uri);\napp.get('/auth', (req, res) => {\n  const url = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    prompt: 'consent',\n    scope: ['https://www.googleapis.com/auth/calendar', 'https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']\n  });\n  res.json({\n    url\n  });\n});\napp.get('/auth/callback', async (req, res) => {\n  const code = req.query.code;\n  try {\n    const {\n      tokens\n    } = await oAuth2Client.getToken(code);\n    oAuth2Client.setCredentials(tokens);\n    res.json(tokens);\n  } catch (error) {\n    console.error('Error al obtener token:', error);\n    res.status(500).send('Error al obtener token');\n  }\n});\napp.post('/event', async (req, res) => {\n  const {\n    token,\n    event\n  } = req.body;\n  try {\n    oAuth2Client.setCredentials({\n      access_token: token\n    });\n    const calendar = google.calendar({\n      version: 'v3',\n      auth: oAuth2Client\n    });\n    const response = await calendar.events.insert({\n      calendarId: 'primary',\n      requestBody: event\n    });\n    res.json(response.data);\n  } catch (error) {\n    console.error('Error al crear evento:', error);\n    res.status(500).send('Error al crear evento');\n  }\n});\n\n// ========== INICIAR SERVIDOR ==========\napp.listen(PORT, () => {\n  console.log(`✅ Servidor corriendo en http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","multer","fs","readline","config","app","PORT","use","json","upload","dest","post","single","req","res","filePath","file","path","results","fileStream","createReadStream","rl","createInterface","input","crlfDelay","Infinity","current","Clase","Profesor","Día","Hora","Aula","line","includes","_line$split$","split","trim","_line$split$2","_line$split$3","_line$split$4","_line$split$5","push","unlinkSync","error","console","status","send","google","oAuth2Client","auth","OAuth2","process","env","client_id","client_secret","redirect_uri","get","url","generateAuthUrl","access_type","prompt","scope","code","query","tokens","getToken","setCredentials","token","event","body","access_token","calendar","version","response","events","insert","calendarId","requestBody","data","listen","log"],"sources":["C:/Users/Ayrton/Desktop/Proyecto-pre tesis - copia/frontend/src/components/Layout.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst multer = require('multer');\r\nconst fs = require('fs');\r\nconst readline = require('readline');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Multer para subir archivos\r\nconst upload = multer({ dest: 'uploads/' });\r\n\r\n// Ruta para subir archivo CSV\r\napp.post('/upload-csv', upload.single('archivo'), async (req, res) => {\r\n  const filePath = req.file.path;\r\n  const results = [];\r\n\r\n  try {\r\n    const fileStream = fs.createReadStream(filePath);\r\n    const rl = readline.createInterface({\r\n      input: fileStream,\r\n      crlfDelay: Infinity,\r\n    });\r\n\r\n    let current = {\r\n      Clase: '',\r\n      Profesor: '',\r\n      Día: '',\r\n      Hora: '',\r\n      Aula: '',\r\n    };\r\n\r\n    for await (const line of rl) {\r\n      if (line.includes('Clase:')) {\r\n        current.Clase = line.split(':')[1]?.trim();\r\n      } else if (line.includes('Profesor:')) {\r\n        current.Profesor = line.split(':')[1]?.trim();\r\n      } else if (line.includes('Día:')) {\r\n        current.Día = line.split(':')[1]?.trim();\r\n      } else if (line.includes('Hora:')) {\r\n        current.Hora = line.split(':')[1]?.trim();\r\n      } else if (line.includes('Aula:')) {\r\n        current.Aula = line.split(':')[1]?.trim();\r\n      }\r\n\r\n      // Si ya tenemos todos los campos, guardamos el horario\r\n      if (current.Clase && current.Profesor && current.Día && current.Hora && current.Aula) {\r\n        results.push({ ...current });\r\n        current = {\r\n          Clase: '',\r\n          Profesor: '',\r\n          Día: '',\r\n          Hora: '',\r\n          Aula: '',\r\n        };\r\n      }\r\n    }\r\n\r\n    fs.unlinkSync(filePath); // borrar archivo temporal\r\n    res.json(results);\r\n  } catch (error) {\r\n    console.error('Error al procesar archivo:', error);\r\n    res.status(500).send('Error al procesar archivo');\r\n  }\r\n});\r\n\r\n// ========== AUTENTICACIÓN GOOGLE CALENDAR ==========\r\n\r\nconst { google } = require('googleapis');\r\n\r\nconst oAuth2Client = new google.auth.OAuth2(\r\n  process.env.client_id,\r\n  process.env.client_secret,\r\n  process.env.redirect_uri\r\n);\r\n\r\napp.get('/auth', (req, res) => {\r\n  const url = oAuth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    prompt: 'consent',\r\n    scope: [\r\n      'https://www.googleapis.com/auth/calendar',\r\n      'https://www.googleapis.com/auth/userinfo.email',\r\n      'https://www.googleapis.com/auth/userinfo.profile',\r\n      'openid',\r\n    ],\r\n  });\r\n  res.json({ url });\r\n});\r\n\r\napp.get('/auth/callback', async (req, res) => {\r\n  const code = req.query.code;\r\n  try {\r\n    const { tokens } = await oAuth2Client.getToken(code);\r\n    oAuth2Client.setCredentials(tokens);\r\n    res.json(tokens);\r\n  } catch (error) {\r\n    console.error('Error al obtener token:', error);\r\n    res.status(500).send('Error al obtener token');\r\n  }\r\n});\r\n\r\napp.post('/event', async (req, res) => {\r\n  const { token, event } = req.body;\r\n  try {\r\n    oAuth2Client.setCredentials({ access_token: token });\r\n    const calendar = google.calendar({ version: 'v3', auth: oAuth2Client });\r\n    const response = await calendar.events.insert({\r\n      calendarId: 'primary',\r\n      requestBody: event,\r\n    });\r\n    res.json(response.data);\r\n  } catch (error) {\r\n    console.error('Error al crear evento:', error);\r\n    res.status(500).send('Error al crear evento');\r\n  }\r\n});\r\n\r\n// ========== INICIAR SERVIDOR ==========\r\napp.listen(PORT, () => {\r\n  console.log(`✅ Servidor corriendo en http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}